id: bwt
title: Bitcoin Wallet Tracker
version: 0.2.4
release-notes: https://github.com/bwt-dev/bwt/releases/tag/v0.2.4
license: mit
wrapper-repo: https://github.com/Start9Labs/bwt-wrapper
upstream-repo: https://github.com/bwt-dev/bwt
support-site: https://github.com/bwt-dev/bwt/issues
marketing-site: https://bwt.dev
build: ["make"]
min-os-version: 0.3.0
description:
  short: "A lightweight wallet descriptor/xpub tracker and query engine for Bitcoin, implemented in Rust."
  long: |
    bwt is a lightweight and performant descriptor-based wallet indexer backed by a bitcoin full node, using a model similar to that of Electrum Personal Server. It can serve as a personal alternative to public Electrum servers or power bitcoin apps such as wallet backends, payment processors and more.
    It uses bitcoind to keep track of your wallet addresses (derived from your xpub(s)) and builds an index of their history that can be queried using the Electrum RPC protocol or using bwts custom designed HTTP API.
    Real-time updates are available through Server-Sent events (a streaming long-lived HTTP connection), or using Web Hooks push updates (an HTTP request sent to your URL with the event).
    The index is currently managed in-memory and does not get persisted (this is expected to change), but building it is pretty fast: bwt can index thousands of transactions in a matter of seconds.
    TL;DR: EPS + Rust + Modern HTTP API
assets:
  license: LICENSE
  icon: icon.png
  instructions: instructions.md
  docker-images: image.tar
main:
  type: docker
  image: main
  entrypoint: "docker_entrypoint.sh"
  args: []
  mounts:
    main: /root
    compat: /mnt/assets
  io-format: yaml
health-checks: {}
  # rpc:
  #   type: docker
  #   image: main
  #   system: false
  #   entrypoint: bitcoin-cli
  #   args:
  #     - "-rpcconnect=bitcoind.embassy"
  #     - "-getinfo"
  #   mounts: {}
  #   io-format: yaml
  #   critical: false
  #   inject: true
  # synced:
  #   type: docker
  #   image: utils
  #   system: true
  #   entrypoint: /mnt/assets/check-synced.sh
  #   args: []
  #   mounts:
  #     main: /root/.bitcoin
  #     utils: /mnt/assets
  #   io-format: yaml
  #   critical: false
config:
  get:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args: 
      - config
      - get
      - /root
      - "/mnt/assets/config_spec.yaml"
    mounts:
      compat: /mnt/assets
      main: /root
    io-format: yaml
  set:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - config
      - set
      - bwt
      - /root
      - "/mnt/assets/config_rules.yaml"
    mounts:
      compat: /mnt/assets
      main: /root
    io-format: yaml
# properties:
#   type: docker
#   image: compat
#   system: true
#   entrypoint: compat
#   args:
#     - properties
#     - /root
#   mounts:
#     main: /root
#   io-format: yaml
volumes:
  main:
    type: data
  compat:
    type: assets
interfaces:
  http:
    name: HTTP REST API
    description: Listens for JSON-RPC commands
    tor-config:
      port-mapping:
        3060: "3060"
    lan-config:
      3060:
        ssl: false
        mapping: 3060
    ui: false
    protocols:
      - tcp
      - http
  electrum:
    name: Electrum Interface
    description: Serves an electrum API for use with compatible wallets
    tor-config:
      port-mapping:
        50001: "50001"
    lan-config:
      50001:
        ssl: false
        mapping: 50001
    ui: false
    protocols:
      - tcp
      - electrum
dependencies:
  bitcoind:
    version: "^0.21.1.2"
    requirement:
      type: "opt-out"
      how: Can alternatively configure an external bitcoin node.
    critical: false
    description: BWT tracks wallets inside bitcoin core.
    config:
      check: 
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - dependency
          - check
          - bwt
          - bitcoind
          - /root
          - "/mnt/assets/bitcoind_config_rules.yaml"
        mounts:
          compat: /mnt/assets
          main: /root
        io-format: yaml
      auto-configure:
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - dependency
          - "auto-configure"
          - bwt
          - bitcoind
          - /root
          - "/mnt/assets/bitcoind_config_rules.yaml"
        mounts:
          compat: /mnt/assets
          main: /root
        io-format: yaml
  btc-rpc-proxy:
    version: "^0.3.0"
    requirement:
      type: "opt-out"
      how: Can alternatively configure an external bitcoin node.
    critical: false
    description: Control access to rpc commands and fetch, via the peer protocol, validated blocks that were previously pruned.
    config:
      check: 
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - dependency
          - check
          - "bwt"
          - btc-rpc-proxy
          - /root
          - "/mnt/assets/btc-rpc-proxy.rules.yaml"
        mounts:
          compat: /mnt/assets
          main: /root
        io-format: yaml
      auto-configure:
        type: docker
        image: compat
        system: true
        entrypoint: compat
        args:
          - dependency
          - "auto-configure"
          - "bwt"
          - btc-rpc-proxy
          - /root
          - "/mnt/assets/btc-rpc-proxy.rules.yaml"
        mounts:
          compat: /mnt/assets
          main: /root
        io-format: yaml
backup:
  create:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - create
      - /mnt/backup
      - /root/data
    mounts:
      BACKUP: /mnt/backup
      main: /root/data
  restore:
    type: docker
    image: compat
    system: true
    entrypoint: compat
    args:
      - duplicity
      - restore
      - /mnt/backup
      - /root/data
    mounts:
      BACKUP: /mnt/backup
      main: /root/data
